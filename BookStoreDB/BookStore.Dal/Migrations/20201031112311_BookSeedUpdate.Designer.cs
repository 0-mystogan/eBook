// <auto-generated />
using System;
using BookStore.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.Dal.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20201031112311_BookSeedUpdate")]
    partial class BookSeedUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.Dal.Domain.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BookStore.Domain.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("This is date when object is updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Julie Garwood",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(1472),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Roman Vjenčanje nezaboravna je ljubavna priča puna strasti i uzbudljivih intriga iz pera nenadmašne Julie Garwood. Putujući iz Engleske u Škotsku kako bi se udala.",
                            Image = "../../assets/Vjencanje.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vjenčanje",
                            Price = 22m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 2,
                            Author = "Fredrik Bakman",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8763),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Ponekad je tako jednostavno potaći ljude da mrze jedni druge da je prosto neshvatljivo kako bilo šta drugo i radimo. Nakon užasnih zbivanja koja su potresla Medvjedgrad.",
                            Image = "../../assets/Mi_protiv_vas.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mi protiv vas",
                            Price = 20m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 3,
                            Author = "Herta Miler",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8860),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Dobitnica Nobelove nagrade. Lolino samoubistvo, koje je možda i ubistvo, povezuje četvoro mladih ljudi. Između njih se razvija neraskidivo prijateljstvo.",
                            Image = "../../assets/Zivotinja_srca.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Životinja srca",
                            Price = 15m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 4,
                            Author = "Fadil Duranović",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8863),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Fadil Duranović se suočio sa sobom i svijetom, a potom zatočen slikom i međusobnim odnosom, pjesnički osvijestio svoju komunikaciju.",
                            Image = "../../assets/Zivim_tiho.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Živim tiho",
                            Price = 15m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 5,
                            Author = "Kejt Morton",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8866),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Mog pravog imena niko se ne seća. Istinu o tom letu niko ne zna. U leto 1862. grupa mladih umetnika na čelu sa talentovanim Edvardom Redklifom.",
                            Image = "../../assets/Casovnicareva_kci.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Časovničareva kći",
                            Price = 26m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 6,
                            Author = "Džon Irving",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8872),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Radnja ovog romana odvija se u ruralnim krajevima Nove Engleske u prvoj polovini dvadesetog veka. To je priča o doktoru Vilburu Larču.",
                            Image = "../../assets/Tudja_pravila.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tuđa pravila",
                            Price = 30m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 7,
                            Author = "Miroslav Antić",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8874),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Veselo cigansko vašarište sa nekoliko suza i kapi kiše Miroslav Antić posvećuje ovu knjigu mladom Ciganinu Miletu Dileji, koga su fašisti jedne noći odveli.",
                            Image = "../../assets/Garavi_sokak.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Garavi sokak",
                            Price = 16m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 8,
                            Author = "Umberto Eko",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8876),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Jedan od temeljnih postmodernističkih romana o fatalnom dejstvu jedne zabranjene knjige smješten je u godinu 1327. Franjevački monasi u bogatoj italijanskoj opatiji.",
                            Image = "../../assets/Ime_ruze.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ime ruže",
                            Price = 15m,
                            Quantity = 13
                        },
                        new
                        {
                            Id = 9,
                            Author = "Fredrik Bakman",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 99, DateTimeKind.Utc).AddTicks(8878),
                            CreatedBy = "jasirburic",
                            Currrency = "BAM",
                            Description = "Roman Medvjedgrad prvi je dio autorove duologije o problemima što ih donosi život u maloj zajednici. Problemima što ih se lako može preslikati i na šire i veće zajednice.",
                            Image = "../../assets/Medvjedgrad.jpg",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Medvjedgrad",
                            Price = 20m,
                            Quantity = 13
                        });
                });

            modelBuilder.Entity("BookStore.Domain.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("BookStore.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 109, DateTimeKind.Utc).AddTicks(4940),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Roman"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 109, DateTimeKind.Utc).AddTicks(6175),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 109, DateTimeKind.Utc).AddTicks(6201),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Poezija"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymantMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 115, DateTimeKind.Utc).AddTicks(1122),
                            CreatedBy = "jasirbuirc",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymantMethod = "Paypal",
                            Quantity = 2,
                            Total = 38m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 115, DateTimeKind.Utc).AddTicks(6417),
                            CreatedBy = "jasirbuirc",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymantMethod = "Paypal",
                            Quantity = 1,
                            Total = 19m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 115, DateTimeKind.Utc).AddTicks(6509),
                            CreatedBy = "jasirbuirc",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymantMethod = "Paypal",
                            Quantity = 2,
                            Total = 10m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("BookStore.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasComment("This is date when object is updated");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Gorazdanska 96",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 121, DateTimeKind.Utc).AddTicks(3817),
                            CreatedBy = "jasirburic",
                            Email = "jasir.buric@edu.fit.ba",
                            FirstName = "Jasir",
                            IsAdmin = false,
                            LastName = "Buric",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "123445566666"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Halkici 23",
                            CreatedAt = new DateTime(2020, 10, 31, 11, 23, 9, 121, DateTimeKind.Utc).AddTicks(4029),
                            CreatedBy = "jasirburic",
                            Email = "muhamed.halkic@edu.fit.ba",
                            FirstName = "Muhamed",
                            IsAdmin = false,
                            LastName = "Halkic",
                            ModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "lksdjfllkl44444"
                        });
                });

            modelBuilder.Entity("BookStore.Dal.Domain.Cart", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("Carts")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Domain.BookCategory", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookStore.Domain.Order", b =>
                {
                    b.HasOne("BookStore.Domain.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
